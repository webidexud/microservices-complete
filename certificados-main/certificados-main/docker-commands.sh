#!/bin/bash

# ==============================================
# COMANDOS √öTILES PARA CERTIFICADOS DOCKER
# ==============================================

case "$1" in
    "start")
        echo "üöÄ Iniciando todos los servicios..."
        docker-compose up -d
        echo "‚úÖ Servicios iniciados"
        echo "üì± Admin: http://localhost/admin"
        echo "üåê P√∫blico: http://localhost"
        echo "üìä Portainer: http://localhost:9000"
        ;;
    
    "stop")
        echo "üõë Deteniendo todos los servicios..."
        docker-compose down
        echo "‚úÖ Servicios detenidos"
        ;;
    
    "restart")
        echo "üîÑ Reiniciando servicios..."
        docker-compose down
        docker-compose up -d
        echo "‚úÖ Servicios reiniciados"
        ;;
    
    "logs")
        if [ "$2" ]; then
            echo "üìã Mostrando logs de $2..."
            docker-compose logs -f "$2"
        else
            echo "üìã Mostrando logs de todos los servicios..."
            docker-compose logs -f
        fi
        ;;
    
    "build")
        if [ "$2" ]; then
            echo "üî® Reconstruyendo $2..."
            docker-compose build "$2"
            docker-compose up -d "$2"
        else
            echo "üî® Reconstruyendo todos los servicios..."
            docker-compose build
            docker-compose up -d
        fi
        ;;
    
    "shell")
        if [ "$2" ]; then
            echo "üêö Accediendo a shell de $2..."
            docker exec -it "certificates-$2" bash
        else
            echo "‚ùå Especifica el servicio: admin, public, mysql, redis"
        fi
        ;;
    
    "status")
        echo "üìä Estado de los servicios:"
        docker-compose ps
        echo ""
        echo "üîç Health checks:"
        curl -s http://localhost/health && echo ""
        curl -s http://localhost:3005/health && echo ""
        ;;
    
    "db")
        echo "üóÑÔ∏è Accediendo a MySQL..."
        docker exec -it certificates-mysql mysql -u certificates_user -p certificados_idexud
        ;;
    
    "redis")
        echo "üìÆ Accediendo a Redis..."
        docker exec -it certificates-redis redis-cli -a redis123
        ;;
    
    "clean")
        echo "üßπ Limpiando contenedores e im√°genes no utilizadas..."
        docker system prune -f
        echo "‚úÖ Limpieza completada"
        ;;
    
    "reset")
        echo "‚ö†Ô∏è ADVERTENCIA: Esto eliminar√° TODOS los datos!"
        read -p "¬øEst√°s seguro? (y/N): " confirm
        if [[ $confirm == "y" || $confirm == "Y" ]]; then
            echo "üóëÔ∏è Eliminando todo..."
            docker-compose down -v
            docker system prune -af
            echo "‚úÖ Reset completado"
        else
            echo "‚ùå Operaci√≥n cancelada"
        fi
        ;;
    
    "backup")
        echo "üíæ Creando backup de la base de datos..."
        mkdir -p backups
        docker exec certificates-mysql mysqldump -u certificates_user -pcertificates123 certificados_idexud > "backups/backup_$(date +%Y%m%d_%H%M%S).sql"
        echo "‚úÖ Backup creado en carpeta backups/"
        ;;
    
    "restore")
        if [ "$2" ]; then
            echo "üì• Restaurando backup $2..."
            docker exec -i certificates-mysql mysql -u certificates_user -pcertificates123 certificados_idexud < "$2"
            echo "‚úÖ Backup restaurado"
        else
            echo "‚ùå Especifica el archivo de backup"
        fi
        ;;
    
    "setup")
        echo "‚öôÔ∏è Configuraci√≥n inicial del proyecto..."
        
        # Crear directorios necesarios
        mkdir -p docker
        mkdir -p backups
        mkdir -p logs
        
        # Permisos para scripts
        chmod +x docker/entrypoint-*.sh
        chmod +x docker/healthcheck-*.sh
        
        # Crear archivo de hosts local
        echo "127.0.0.1 certificates.local" >> /etc/hosts 2>/dev/null || echo "‚ö†Ô∏è No se pudo agregar al archivo hosts (requiere sudo)"
        echo "127.0.0.1 admin.certificates.local" >> /etc/hosts 2>/dev/null
        echo "127.0.0.1 public.certificates.local" >> /etc/hosts 2>/dev/null
        
        echo "‚úÖ Configuraci√≥n inicial completada"
        ;;
    
    "info")
        echo "‚ÑπÔ∏è Informaci√≥n del sistema:"
        echo "=========================================="
        echo "üê≥ Docker version: $(docker --version)"
        echo "üêô Docker Compose version: $(docker-compose --version)"
        echo ""
        echo "üìä Estado de contenedores:"
        docker-compose ps
        echo ""
        echo "üíæ Uso de vol√∫menes:"
        docker volume ls | grep certificates
        echo ""
        echo "üåê URLs disponibles:"
        echo "  - Admin Panel: http://localhost/admin"
        echo "  - P√∫blico: http://localhost"
        echo "  - Admin directo: http://localhost:3001"
        echo "  - P√∫blico directo: http://localhost:3002"
        echo "  - File Service: http://localhost:3005"
        echo "  - Portainer: http://localhost:9000"
        ;;
    
    *)
        echo "üìö Comandos disponibles:"
        echo "================================"
        echo "  start     - Iniciar servicios"
        echo "  stop      - Detener servicios"
        echo "  restart   - Reiniciar servicios"
        echo "  logs      - Ver logs [servicio]"
        echo "  build     - Reconstruir [servicio]"
        echo "  shell     - Acceder a shell [servicio]"
        echo "  status    - Estado de servicios"
        echo "  db        - Acceder a MySQL"
        echo "  redis     - Acceder a Redis"
        echo "  clean     - Limpiar Docker"
        echo "  reset     - Reset completo (¬°ELIMINA DATOS!)"
        echo "  backup    - Backup de BD"
        echo "  restore   - Restaurar backup [archivo]"
        echo "  setup     - Configuraci√≥n inicial"
        echo "  info      - Informaci√≥n del sistema"
        echo ""
        echo "üìù Ejemplos:"
        echo "  ./docker-commands.sh start"
        echo "  ./docker-commands.sh logs admin"
        echo "  ./docker-commands.sh shell admin"
        echo "  ./docker-commands.sh build public"
        ;;
esac