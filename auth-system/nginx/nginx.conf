events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # Configuración de logs
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Configuraciones básicas
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Upstream para backend
    upstream backend {
        server auth_backend:3000;
    }

    # Upstream para frontend
    upstream frontend {
        server auth_frontend:3000;
    }

    # Servidor principal
    server {
        listen 80;
        server_name localhost;

        # Configuración de seguridad básica
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;

        # API routes → Backend
        location /api/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Configuraciones para WebSocket si es necesario
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
        }

        # ✅ Excel2db Microservice CON VALIDACIÓN DE COOKIES
        location /excel2db/ {
            # Validar autenticación con auth-system
            auth_request /auth/validate;
            
            # Capturar información del usuario
            auth_request_set $user_id $upstream_http_x_user_id;
            auth_request_set $user_email $upstream_http_x_user_email;
            auth_request_set $user_name $upstream_http_x_user_name;
            auth_request_set $user_roles $upstream_http_x_user_role;
            
            # Pasar headers al microservicio
            proxy_set_header X-User-ID $user_id;
            proxy_set_header X-User-Email $user_email;
            proxy_set_header X-User-Name $user_name;
            proxy_set_header X-User-Roles $user_roles;
            
            # Pasar cookies originales al microservicio
            proxy_set_header Cookie $http_cookie;
            proxy_set_header Authorization $http_authorization;
            
            # Headers estándar
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Redirect si no autenticado
            error_page 401 = @redirect_login;
            
            # Quitar /excel2db/ del path antes de enviar
            rewrite ^/excel2db/(.*) /$1 break;
            
            # Proxy al microservicio Excel2db
            proxy_pass http://bot_excel:61800;
        }

        # ✅ Endpoint de validación MEJORADO para leer cookies
        location = /auth/validate {
            internal;
            proxy_pass http://backend/api/auth/validate;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            
            # Extraer token de cookie y enviarlo como Authorization header
            set $auth_token "";
            if ($http_cookie ~* "accessToken=([^;]+)") {
                set $auth_token "Bearer $1";
            }
            
            # Usar Authorization header si existe, sino usar cookie
            set $final_auth $http_authorization;
            if ($final_auth = "") {
                set $final_auth $auth_token;
            }
            
            proxy_set_header Authorization $final_auth;
            proxy_set_header Cookie $http_cookie;
            proxy_set_header X-Forwarded-For $remote_addr;
            proxy_set_header Host $host;
        }

        # Redirect para login si no autenticado
        location @redirect_login {
            return 302 http://localhost/login?redirect=$request_uri;
        }

        # Frontend SPA - debe ser la última regla
        location / {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Configuraciones para SPA
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_cache_bypass $http_upgrade;
            
            # Manejar rutas de SPA (React Router)
            try_files $uri $uri/ @fallback;
        }

        # Fallback para SPA routing
        location @fallback {
            proxy_pass http://frontend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Manejo de errores
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}